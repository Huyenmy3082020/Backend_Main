const IngredientService = require("../service/InService");
const { findCategoryByName } = require("./repository/categoryRepository");
const { findSupplierByName } = require("./repository/supplierRepository");

// üü¢ Th√™m m·ªõi Ingredient
exports.createIngredient = async (req, res) => {
  try {
    const { category, supplier, name, price, description } = req.body;

    // T√¨m Category & Supplier t·ª´ database
    const categoryObj = await findCategoryByName(category);
    const supplierObj = await findSupplierByName(supplier);

    if (!categoryObj || !supplierObj) {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c ho·∫∑c nh√† cung c·∫•p!",
      });
    }

    // L·∫•y _id d∆∞·ªõi d·∫°ng string
    const categoryId = categoryObj._id.toString();
    const supplierId = supplierObj._id.toString();

    console.log("Category ID:", categoryId, "Supplier ID:", supplierId);

    // G·ªçi service ƒë·ªÉ t·∫°o nguy√™n li·ªáu
    const newIngredient = await IngredientService.createIngredient({
      categoryId,
      supplierId,
      name,
      price,
      description,
    });

    res.status(201).json({
      success: true,
      message: "Th√™m th√†nh c√¥ng!",
      ingredient: newIngredient,
    });
  } catch (error) {
    console.error("L·ªói:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi th√™m nguy√™n li·ªáu!",
      error: error.message,
    });
  }
};

// üîµ L·∫•y danh s√°ch t·∫•t c·∫£ Ingredients
exports.getAllIngredients = async (req, res) => {
  try {
    const ingredients = await IngredientService.getAllIngredients();
    res.status(200).json({ success: true, ingredients });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch!",
      error: error.message,
    });
  }
};

// üü° L·∫•y m·ªôt Ingredient theo ID
exports.getIngredientById = async (req, res) => {
  try {
    const ingredient = await IngredientService.getIngredientById(req.params.id);
    if (!ingredient)
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y nguy√™n li·ªáu!" });

    res.status(200).json({ success: true, ingredient });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y d·ªØ li·ªáu!",
      error: error.message,
    });
  }
};

// üü† C·∫≠p nh·∫≠t Ingredient
exports.updateIngredient = async (req, res) => {
  try {
    const updatedIngredient = await IngredientService.updateIngredient(
      req.params.id,
      req.body
    );
    if (!updatedIngredient)
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y nguy√™n li·ªáu!" });

    res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
      ingredient: updatedIngredient,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t!",
      error: error.message,
    });
  }
};

// üî¥ X√≥a Ingredient
exports.deleteIngredient = async (req, res) => {
  try {
    const deletedIngredient = await IngredientService.deleteIngredient(
      req.params.id
    );
    if (!deletedIngredient)
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y nguy√™n li·ªáu!" });

    res.status(200).json({ success: true, message: "X√≥a th√†nh c√¥ng!" });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: "L·ªói khi x√≥a!", error: error.message });
  }
};
