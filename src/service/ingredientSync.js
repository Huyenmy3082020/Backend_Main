const mongoose = require("mongoose");
const Ingredient = require("../models/IngredientsModel");
const connectDB = require("../../config/mongodb/index");
const { esClient } = require("../../config/elasticsearch");

const indexName = "ingredient";

// üîπ 1. T·∫°o Index n·∫øu ch∆∞a c√≥
const createIndexIfNotExists = async () => {
  const exists = await esClient.indices.exists({ index: indexName });

  if (!exists.body) {
    await esClient.indices.create({
      index: indexName,
      body: {
        mappings: {
          properties: {
            categoryId: { type: "keyword" },
            supplierId: { type: "keyword" },
            name: { type: "text" },
            price: { type: "double" },
            unit: { type: "keyword" },
            description: { type: "text" },
            updatedAt: { type: "date" },
            status: { type: "boolean" },
            isDeleted: { type: "boolean" },
          },
        },
      },
    });
    console.log(`‚úÖ Index '${indexName}' ƒë√£ ƒë∆∞·ª£c t·∫°o!`);
  }
};

// üîπ 2. ƒê·ªìng b·ªô khi th√™m s·∫£n ph·∫©m
const syncIngredientToElasticsearch = async (ingredient) => {
  await esClient.index({
    index: indexName,
    id: ingredient._id.toString(),
    body: {
      categoryId: ingredient.categoryId?.toString(),
      supplierId: ingredient.supplierId?.toString(),
      name: ingredient.name,
      price: ingredient.price,
      unit: ingredient.unit,
      description: ingredient.description,
      updatedAt: ingredient.updatedAt,
      status: ingredient.status,
      isDeleted: ingredient.isDeleted,
    },
  });

  console.log(`üöÄ ƒê√£ ƒë·ªìng b·ªô nguy√™n li·ªáu: ${ingredient.name}`);
};

// üîπ 3. C·∫≠p nh·∫≠t s·∫£n ph·∫©m
const updateIngredientInElasticsearch = async (id, updatedData) => {
  await esClient.update({
    index: indexName,
    id,
    body: { doc: updatedData },
  });

  console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t nguy√™n li·ªáu ${id} trong Elasticsearch`);
};

// üîπ 4. X√≥a s·∫£n ph·∫©m
const deleteIngredientFromElasticsearch = async (id) => {
  console.log("Id", id);
  await esClient.delete({
    index: indexName,
    id,
  });

  console.log(`üóëÔ∏è ƒê√£ x√≥a nguy√™n li·ªáu ${id} kh·ªèi Elasticsearch`);
};

// üîπ 5. ƒê·ªìng b·ªô t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ MongoDB -> Elasticsearch
const syncAllIngredients = async () => {
  try {
    const ingredients = await Ingredient.find({ isDeleted: false });

    if (ingredients.length === 0) {
      console.log("‚ö†Ô∏è Kh√¥ng c√≥ nguy√™n li·ªáu n√†o ƒë·ªÉ ƒë·ªìng b·ªô.");
      return;
    }

    const bulkOperations = ingredients.flatMap((ingredient) => [
      { index: { _index: indexName, _id: ingredient._id.toString() } },
      {
        categoryId: ingredient.categoryId?.toString(),
        supplierId: ingredient.supplierId?.toString(),
        name: ingredient.name,
        price: ingredient.price,
        unit: ingredient.unit,
        description: ingredient.description,
        updatedAt: ingredient.updatedAt,
        status: ingredient.status,
        isDeleted: ingredient.isDeleted,
      },
    ]);

    await esClient.bulk({ body: bulkOperations });
    console.log(
      `‚úÖ ƒê√£ ƒë·ªìng b·ªô ${ingredients.length} nguy√™n li·ªáu v√†o Elasticsearch`
    );
  } catch (error) {
    console.error("‚ùå L·ªói khi ƒë·ªìng b·ªô d·ªØ li·ªáu:", error);
  }
};

// üõ† Ch·∫°y ƒë·ªìng b·ªô sau khi k·∫øt n·ªëi MongoDB
const startSync = async () => {
  await connectDB(); // K·∫øt n·ªëi MongoDB
  await syncAllIngredients(); // ƒê·ªìng b·ªô to√†n b·ªô d·ªØ li·ªáu
};

startSync();

module.exports = {
  createIndexIfNotExists,
  syncIngredientToElasticsearch,
  updateIngredientInElasticsearch,
  deleteIngredientFromElasticsearch,
  syncAllIngredients,
};
