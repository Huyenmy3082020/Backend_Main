const GoodsDelivery = require("../models/DeliveriesModel");
const Inventory = require("../models/InventoryModel");
const mongoose = require("mongoose");

async function createGoodsDelivery(data) {
  const session = await mongoose.startSession();
  session.startTransaction();
  try {
    const goodsDelivery = new GoodsDelivery(data);
    console.log("goodsDelivery", goodsDelivery);
    await goodsDelivery.save({ session });

    // C·∫≠p nh·∫≠t t·ªìn kho cho t·ª´ng s·∫£n ph·∫©m
    for (const item of goodsDelivery.items) {
      if (!item.ingredientsId) {
        throw new Error("ingredientsId is missing in one of the items");
      }

      // Chuy·ªÉn ƒë·ªïi ingredientsId sang ObjectId n·∫øu c·∫ßn
      const ingredientObjectId = new mongoose.Types.ObjectId(
        item.ingredientsId
      );

      await Inventory.findOneAndUpdate(
        { ingredientsId: ingredientObjectId }, // ƒê·∫£m b·∫£o ID ƒë√∫ng ki·ªÉu
        { $inc: { stock: item.quantity } },
        { upsert: true, new: true, session }
      );
    }

    await session.commitTransaction();
    session.endSession();
    return goodsDelivery;
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error("Error in createGoodsDelivery:", error);
    throw error;
  }
}

// üîπ S·ª≠a phi·∫øu nh·∫≠p h√†ng
async function updateGoodsDelivery(id, data) {
  const session = await mongoose.startSession();
  session.startTransaction();
  try {
    const existingGoodsDelivery = await GoodsDelivery.findById(id).session(
      session
    );
    if (!existingGoodsDelivery) {
      throw new Error("GoodsDelivery not found");
    }

    // Kh√¥i ph·ª•c t·ªìn kho t·ª´ phi·∫øu nh·∫≠p c≈©
    for (const item of existingGoodsDelivery.items) {
      await Inventory.findOneAndUpdate(
        { ingredientsId: item.ingredientsId },
        { $inc: { stock: -item.quantity } },
        { session }
      );
    }

    // C·∫≠p nh·∫≠t phi·∫øu nh·∫≠p
    existingGoodsDelivery.set(data);
    await existingGoodsDelivery.save({ session });

    // C·∫≠p nh·∫≠t t·ªìn kho t·ª´ phi·∫øu nh·∫≠p m·ªõi
    for (const item of existingGoodsDelivery.items) {
      await Inventory.findOneAndUpdate(
        { ingredientsId: item.ingredientsId },
        { $inc: { stock: item.quantity } },
        { upsert: true, new: true, session }
      );
    }

    await session.commitTransaction();
    session.endSession();
    return existingGoodsDelivery;
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    throw error;
  }
}

// üîπ X√≥a phi·∫øu nh·∫≠p h√†ng
async function deleteGoodsDelivery(id) {
  console.log(id);
  const session = await mongoose.startSession();
  session.startTransaction();
  try {
    const goodsDelivery = await GoodsDelivery.findByIdAndDelete(id).session(
      session
    );
    if (!goodsDelivery) {
      throw new Error("GoodsDelivery not found");
    }

    // Gi·∫£m t·ªìn kho cho t·ª´ng s·∫£n ph·∫©m
    for (const item of goodsDelivery.items) {
      await Inventory.findOneAndUpdate(
        { productId: item.productId },
        { $inc: { stock: -item.quantity } },
        { session }
      );
    }

    await session.commitTransaction();
    session.endSession();
    return goodsDelivery;
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    throw error;
  }
}
async function getAllGoodsDeliveries() {
  return await GoodsDelivery.find()
    .populate({
      path: "items.ingredientsId",
      select: "name price _id", // L·∫•y c√°c th√¥ng tin c·∫ßn thi·∫øt t·ª´ Ingredient
    })
    .populate("userId") // Populate th√¥ng tin user n·∫øu c·∫ßn
    .select("items quantity totalPrice deliveryDate deliveryAddress");
}

module.exports = {
  createGoodsDelivery,
  updateGoodsDelivery,
  deleteGoodsDelivery,
  getAllGoodsDeliveries,
};
